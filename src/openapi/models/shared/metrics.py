"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from openapi import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class MetricsThisWeek:
    r"""Summary totals for the last 7 days"""
    added: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added'), 'exclude': lambda f: f is None }})
    r"""APIs added in the last week"""
    updated: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated'), 'exclude': lambda f: f is None }})
    r"""APIs updated in the last week"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class Metrics:
    r"""List of basic metrics"""
    num_ap_is: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numAPIs') }})
    r"""Number of unique APIs"""
    num_endpoints: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numEndpoints') }})
    r"""Total number of endpoints inside all definitions"""
    num_specs: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numSpecs') }})
    r"""Number of API definitions including different versions of the same API"""
    datasets: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datasets'), 'exclude': lambda f: f is None }})
    r"""Data used for charting etc"""
    fixed_pct: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fixedPct'), 'exclude': lambda f: f is None }})
    r"""Percentage of all APIs where auto fixes have been applied"""
    fixes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fixes'), 'exclude': lambda f: f is None }})
    r"""Total number of fixes applied across all APIs"""
    invalid: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invalid'), 'exclude': lambda f: f is None }})
    r"""Number of newly invalid APIs"""
    issues: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issues'), 'exclude': lambda f: f is None }})
    r"""Open GitHub issues on our main repo"""
    num_drivers: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numDrivers'), 'exclude': lambda f: f is None }})
    r"""Number of methods of API retrieval"""
    num_providers: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numProviders'), 'exclude': lambda f: f is None }})
    r"""Number of API providers in directory"""
    stars: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stars'), 'exclude': lambda f: f is None }})
    r"""GitHub stars for our main repo"""
    this_week: Optional[MetricsThisWeek] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thisWeek'), 'exclude': lambda f: f is None }})
    r"""Summary totals for the last 7 days"""
    unofficial: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unofficial'), 'exclude': lambda f: f is None }})
    r"""Number of unofficial APIs"""
    unreachable: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unreachable'), 'exclude': lambda f: f is None }})
    r"""Number of unreachable (4XX,5XX status) APIs"""
    

